{"version":3,"sources":["Buttons/Buttons.js","Grid/Cell/Cell.js","Grid/Grid.js","index.js"],"names":["Buttons","props","className","ButtonToolbar","onClick","playButton","styles","paused","nextButton","clearButton","seedButton","Cell","cellClass","id","selectCell","row","col","Grid","width","cols","rowsArr","i","rows","j","cellId","gridFull","push","key","style","arrayClone","arr","JSON","parse","stringify","Main","gridCopy","state","setState","clear","generation","pauseButton","seed","Math","floor","random","intervalId","setInterval","play","speed","clearInterval","faster","slower","inbounds","x","y","isAlive","aliveNeighbors","count","xoffset","yoffset","newGrid","Array","fill","map","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebe9035b.chunk.js","sourcesContent":["import React from 'react';\nimport { ButtonToolbar } from 'react-bootstrap';\n\nconst Buttons = (props) => (\n    <div className=\"center\">\n        <ButtonToolbar>\n            <button className=\"btn btn-default btn-secondary\" onClick={props.playButton} styles=\"width: 20px;\">\n                {props.paused ? \"Play\" : \"Pause\"}\n            </button>\n            <button className=\"btn btn-default btn-secondary\" onClick={props.nextButton}>\n                Step\n            </button>\n            <button className=\"btn btn-default btn-secondary\" onClick={props.clearButton}>\n                Clear\n            </button>\n            <button className=\"btn btn-default btn-secondary\" onClick={props.seedButton}>\n                Seed\n            </button>\n        </ButtonToolbar>\n    </div>\n)\n\nexport default Buttons;\n","import React from 'react';\n\nconst Cell = (props) => (\n    <div\n        className={props.cellClass}\n        id={props.id}\n        onClick={() => { props.selectCell(props.row, props.col); }}\n    >\n    </div>\n);\n\nexport default Cell\n","import React from 'react';\nimport { Cell } from './Cell';\n\nconst Grid = (props) => {\n    const width = props.cols * 14;\n    const rowsArr = [];\n    for (let i=0; i < props.rows; i++) {\n        for (let j=0; j < props.cols; j++) {\n            const cellId = i + \"_\" + j;\n            const cellClass = props.gridFull[i][j] ? \"cell alive\": \"cell dead\";\n            rowsArr.push(\n                <Cell\n                    cellClass={cellClass}\n                    key={cellId}\n                    cellId={cellId}\n                    row={i}\n                    col={j}\n                    selectCell={props.selectCell}\n                />\n            );\n        }\n    }\n    return (\n        <div className=\"grid\" style={{width: width}}>\n            {rowsArr}\n        </div>\n    );\n}\n\nexport default Grid;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Buttons } from './Buttons';\nimport { Grid } from './Grid';\n\nconst arrayClone = (arr) => (JSON.parse(JSON.stringify(arr)));\n\nclass Main extends React.Component {\n    constructor() {\n        super();\n        this.speed = 1000;\n        this.rows = 30;\n        this.cols = 50;\n        this.state = {\n            generation: 0,\n            gridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false)),\n            paused: false,\n        }\n    }\n\n    selectCell = (row, col) => {\n        let gridCopy = arrayClone(this.state.gridFull);\n        gridCopy[row][col] = !gridCopy[row][col];\n        this.setState({\n            gridFull: gridCopy,\n        });\n    }\n\n    clear = () => {\n        let gridCopy = arrayClone(this.state.gridFull);\n        for (let i=0; i < this.rows; i++) {\n            for (let j=0; j < this.cols; j++) {\n                gridCopy[i][j] = false;\n            }\n        }\n        this.setState({\n            generation: 0,\n            gridFull: gridCopy,\n        });\n        this.pauseButton();\n    }\n\n    seed = () => {\n        let gridCopy = arrayClone(this.state.gridFull);\n        for (let i=0; i < this.rows; i++) {\n            for (let j=0; j < this.cols; j++) {\n                gridCopy[i][j] = false;\n                if (Math.floor(Math.random() * 4) === 1) {\n                    gridCopy[i][j] = true;\n                }\n            }\n        }\n        this.setState({\n            generation: 0,\n            gridFull: gridCopy,\n        });\n        this.pauseButton();\n    }\n\n    playButton = () => {\n        if (!this.intervalId) {\n            this.intervalId = setInterval(this.play, this.speed);\n            this.setState({\n                paused: false,\n            });\n        }\n        else {\n            this.pauseButton();\n        }\n    }\n\n    pauseButton = () => {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n        this.setState({\n            paused: true,\n        });\n    }\n\n    faster = () => {\n        this.pauseButton();\n        this.speed -= 50;\n        this.playButton();\n    }\n\n    slower = () => {\n        this.pauseButton();\n        this.speed += 50;\n        this.playButton();\n    }\n\n    inbounds = (x, y) => {\n        return (x > 0 && x < this.rows\n             && y > 0 && y < this.cols);\n    }\n\n    isAlive = (x, y) => {\n        return this.state.gridFull[x][y];\n    }\n\n    aliveNeighbors = (i, j) => {\n        let count = 0;\n        for (let xoffset = -1; xoffset < 2; xoffset++) {\n            for (let yoffset = -1; yoffset < 2; yoffset++) {\n                let x = i + xoffset;\n                let y = j + yoffset;\n                if (x === i && y === j) {\n                    continue;\n                }\n                if (this.inbounds(x, y) && this.isAlive(x, y)){\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    play = () => {\n        let newGrid  = arrayClone(this.state.gridFull);\n        for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.cols; j++) {\n                let aliveNeighbors = this.aliveNeighbors(i, j);\n                newGrid[i][j] = false;\n                if (this.isAlive(i, j)) {\n                    if (2 <= aliveNeighbors && aliveNeighbors <= 3) {\n                        newGrid[i][j] = true;\n                    }\n                }\n                else {\n                    if (aliveNeighbors === 3) {\n                        newGrid[i][j] = true;\n                    }\n                }\n            }\n        }\n        this.setState({\n            generation: this.state.generation+1,\n            gridFull: newGrid,\n        });\n    }\n\n    componentDidMount() {\n        this.seed();\n        this.playButton();\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Conway's Game of Life</h1>\n                <Buttons\n                    playButton={this.playButton}\n                    pauseButton={this.pauseButton}\n                    clearButton={this.clear}\n                    seedButton={this.seed}\n                    nextButton={this.play}\n                    paused={this.state.paused}\n                />\n                <Grid\n                    gridFull={this.state.gridFull}\n                    rows={this.rows}\n                    cols={this.cols}\n                    selectCell={this.selectCell}\n                />\n                <h2>Generations: {this.state.generation}</h2>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n  <Main />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}